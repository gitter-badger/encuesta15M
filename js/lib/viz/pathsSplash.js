var tdviz = tdviz || {'version':0.1, 'controller':{}, 'viz': {} ,'extras': {} };


tdviz.viz.pathsSplash = function (options)

{


    // Object

    var self = {};

    self.interval = 5000;

    // Get options data

    for (key in options){
        self[key] = options[key];
    }


    self.d0 = "M227.976,196.521"+
    "c0,15.738-3.189,30.732-8.958,44.369c-5.768,13.638-14.115,25.919-24.429,36.232c-10.313,10.314-22.595,18.66-36.232,24.429"+
    "c-13.637,5.769-28.631,8.958-44.37,8.958s-30.732-3.189-44.369-8.958S43.7,287.438,33.386,277.123"+
    "c-10.314-10.313-18.66-22.595-24.428-36.232C3.19,227.254,0,212.26,0,196.521s3.189-30.732,8.958-44.37"+
    "c5.768-13.637,14.114-25.918,24.428-36.232s22.595-18.66,36.232-24.428c13.637-5.769,28.63-8.958,44.369-8.958"+
    "s30.732,3.189,44.37,8.958c13.638,5.768,25.919,14.114,36.232,24.428c10.314,10.314,18.661,22.595,24.429,36.232"+
    "C224.787,165.79,227.976,180.783,227.976,196.521z";


    self.d1 ="M1.449,84.088l73.196,68.742"+
    "c0,0,1.91-73.198,62.378-69.378c60.467,3.82,90.382,73.197,90.382,73.197v92.923l-84.018-28.643l-53.466,90.383"+
    "c0,0-75.105,6.364-84.017-21.004c-8.911-27.369-5.092-73.834-5.092-73.834l68.741-29.911L1.449,84.088z";
//    self.d1 = "M-314.332,197.543"+
//    "c0,7.823-0.793,15.461-2.303,22.838s-3.736,14.493-6.604,21.271s-6.375,13.221-10.447,19.249"+
//    "c-4.072,6.029-8.711,11.645-13.838,16.771s-10.742,9.765-16.771,13.838c-6.027,4.072-12.471,7.58-19.248,10.447"+
//    "c-6.779,2.867-13.895,5.094-21.271,6.604c-7.377,1.509-15.016,2.302-22.838,2.302c-7.824,0-15.461-0.793-22.838-2.302"+
//    "c-7.377-1.51-14.492-3.736-21.271-6.604s-13.221-6.375-19.248-10.447c-6.029-4.073-11.646-8.711-16.771-13.838"+
//    "c-5.127-5.127-9.766-10.742-13.838-16.771c-4.073-6.028-7.581-12.471-10.448-19.249s-5.094-13.895-6.603-21.271"+
//    "c-1.51-7.377-2.303-15.015-2.303-22.838s0.793-15.461,2.303-22.838c1.509-7.377,3.735-14.493,6.603-21.271"+
//    "c2.867-6.778,6.375-13.22,10.448-19.249c4.072-6.028,8.711-11.645,13.838-16.771c5.125-5.126,10.742-9.765,16.771-13.837"+
//    "c6.027-4.073,12.469-7.581,19.248-10.448s13.895-5.094,21.271-6.603s15.014-2.302,22.838-2.302c7.822,0,15.461,0.793,22.838,2.302"+
//    "s14.492,3.736,21.271,6.603c6.777,2.867,13.221,6.375,19.248,10.448c6.029,4.073,11.645,8.711,16.771,13.837"+
//    "s9.766,10.743,13.838,16.771c4.072,6.029-58.264,44.797-55.396,51.575s70.938-18.432,72.447-11.055S-314.332,189.72-314.332,197.543"+
//    "z";

//    self.d1 ="M427.809,197.876"+
//    "c0,7.823-19.97,15.128-21.479,22.505s-3.736,14.493-6.604,21.271s-6.375,13.221-10.447,19.249"+
//    "c-4.072,6.029-8.711,11.645-13.838,16.771s-10.742,9.765-16.771,13.838c-6.027,4.072-12.471,7.58-19.248,10.447"+
//    "c-6.779,2.867-13.895,5.094-21.271,6.604c-7.377,1.509-15.408-58.335-23.23-58.335c-7.824,0-15.068,59.844-22.445,58.335"+
//    "c-7.377-1.51-14.492-3.736-21.271-6.604s-13.221-6.375-19.248-10.447c-6.029-4.073-11.646-8.711-16.771-13.838"+
//    "c-5.127-5.127-9.766-10.742-13.838-16.771c-4.073-6.028-7.581-12.471-10.448-19.249s-5.094-13.895-6.603-21.271"+
//    "c-1.51-7.377-26.291-16.878-26.291-24.701s24.781-13.598,26.291-20.975c1.509-7.377,3.735-14.493,6.603-21.271"+
//    "c2.867-6.778,6.375-13.22,10.448-19.249c4.072-6.028,8.711-11.645,13.838-16.771c5.125-5.126,10.742-9.765,16.771-13.837"+
//    "c6.027-4.073,12.469-7.581,19.248-10.448s13.895-5.094,21.271-6.603s15.354,35.206,23.178,35.206"+
//    "c7.822,0,15.121-36.715,22.498-35.206s14.492,3.736,21.271,6.603c6.777,2.867,13.221,6.375,19.248,10.448"+
//    "c6.029,4.073,11.645,8.711,16.771,13.837s9.766,10.743,13.838,16.771c4.072,6.029,7.58,12.471,10.447,19.249"+
//    "c2.867,6.779,5.094,13.895,6.604,21.271S427.809,190.053,427.809,197.876z";
//    self.d0 = "M284.425,188.682c0,0,143.581-10.86,143.581,143.581S370.09,475.844,284.424,475.844s-131.515-43.436-131.515-131.515C152.909,256.25,193.933,188.682,284.425,188.682z";
//    self.d1 = "M532.977,222.466h213.562v240.106c0,0-229.247,4.826-224.42,0S532.977,222.466,532.977,222.466z";
//    self.d2 = "M839.042,166.393l208.718,203.283L827.084,502.299c0,0,42.396-123.928,21.741-209.806C828.171,206.614,839.042,166.393,839.042,166.393z";

    // Color for parents and global nodes (should be equal to background color in body)

    self.backColor = "#000";

    self.parentSelect = "#"+self.idName;

    self.init = function()
    {

    self.bubbleColorScale = d3.scale.category20b();

    self.animationOn = true;

    // svg init

    self.positions=[];

    for(var i=0;i<50;i++)
    {
        self.positions[i] = {'x':0,'y':0};

    }


    console.log("En el init...");
    self.myLog("Iniciando pathsSplash... en ",3);
    self.myLog(self.parentSelect,3);
    self.svg = d3.select(self.parentSelect).append("svg")
        .attr("width",self.width)
        .attr("height",self.height)
        .attr("id","panel")
        .append("g")
        .attr("transform","translate(200,0)");

    self.path = self.svg.append("path").attr("class","formas").attr("d",self.d1)
        .call(transition, self.d0, self.d1);

        function transition(path, d0, d1,offset) {
            path.transition()
                .duration(2000)
                .attrTween("d", pathTween(d1, 4))
                .each("end", function() { d3.select(this).call(transition, d1, d0); });
//            self.svg.transition().duration(2000).attr("transform","translate("+offset+",0)");
        }

        function pathTween(d1, precision) {
            return function() {
                var path0 = this,
                    path1 = path0.cloneNode(),
                    n0 = path0.getTotalLength(),
                    n1 = (path1.setAttribute("d", d1), path1).getTotalLength();

                // Uniform sampling of distance based on specified precision.
                var distances = [0], i = 0, dt = precision / Math.max(n0, n1);
                while ((i += dt) < 1) distances.push(i);
                distances.push(1);

                // Compute point-interpolators at each distance.
                var points = distances.map(function(t) {
                    var p0 = path0.getPointAtLength(t * n0),
                        p1 = path1.getPointAtLength(t * n1);
                    return d3.interpolate([p0.x, p0.y], [p1.x, p1.y]);
                });

                return function(t) {
                    return t < 1 ? "M" + points.map(function(p) { return p(t); }).join("L") : d1;
                };
            }
        };



    }

    self.loop= function () {
        console.log("Un bucle");
        self.path
            .attr("d", self.d1)
            .transition()
            .duration(5000)
            .attr("d", self.d0)
            .transition()
            .delay(5000)
            .attr("d", self.d1)
            .each("end", self.loop);
    }


    self.render = function(data)
    {
        self.data = data;


        console.log("Primer render...");

//        var node = self.svg.selectAll('.node')
//              .data(leaves,function(d){return d.data.name;});



    }

    // Main del objeto

    self.init();


}
